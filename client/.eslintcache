[{"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\index.js":"1","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\reportWebVitals.js":"2","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\App.js":"3","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\assets\\css\\themes.js":"4","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\utils\\queries.js":"5","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\utils\\mutations.js":"6","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\pages\\Scoreboard.js":"7","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\pages\\Quote.js":"8","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\TopicButton\\index.js":"9","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\pages\\Main.js":"10","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\pages\\Topic.js":"11","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\pages\\Author.js":"12","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\Platform\\main.js":"13","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\Platform\\specific.js":"14","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\pages\\SearchResult.js":"15","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\NavBar\\index.js":"16","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\Footer\\index.js":"17","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\ErrorPage\\index.js":"18","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\MainpageSearch\\index.js":"19","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\AuthorCards\\index.js":"20","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\AuthorButton\\index.js":"21","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\AuthorLink\\index.js":"22","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\Results\\index.js":"23","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\ResultsQuote\\index.js":"24","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\pages\\AuthorNav.js":"25","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\pages\\TopicNav.js":"26"},{"size":500,"mtime":1626532748920,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":1626532748920,"results":"29","hashOfConfig":"28"},{"size":2951,"mtime":1636219164629,"results":"30","hashOfConfig":"28"},{"size":3197,"mtime":1636227701005,"results":"31","hashOfConfig":"28"},{"size":3130,"mtime":1636218949402,"results":"32","hashOfConfig":"28"},{"size":84,"mtime":1635797830588,"results":"33","hashOfConfig":"28"},{"size":1644,"mtime":1636057852943,"results":"34","hashOfConfig":"28"},{"size":3422,"mtime":1636224037256,"results":"35","hashOfConfig":"28"},{"size":653,"mtime":1636219508078,"results":"36","hashOfConfig":"28"},{"size":743,"mtime":1636219390440,"results":"37","hashOfConfig":"28"},{"size":2083,"mtime":1636053463518,"results":"38","hashOfConfig":"28"},{"size":2641,"mtime":1636224980232,"results":"39","hashOfConfig":"28"},{"size":2878,"mtime":1635536487186,"results":"40","hashOfConfig":"28"},{"size":1737,"mtime":1635711316441,"results":"41","hashOfConfig":"28"},{"size":1179,"mtime":1636047374344,"results":"42","hashOfConfig":"28"},{"size":2460,"mtime":1636227576661,"results":"43","hashOfConfig":"28"},{"size":1571,"mtime":1636045063290,"results":"44","hashOfConfig":"28"},{"size":347,"mtime":1635539746659,"results":"45","hashOfConfig":"28"},{"size":1816,"mtime":1636223099492,"results":"46","hashOfConfig":"28"},{"size":1213,"mtime":1636221710356,"results":"47","hashOfConfig":"28"},{"size":834,"mtime":1636049067011,"results":"48","hashOfConfig":"28"},{"size":1707,"mtime":1635968378187,"results":"49","hashOfConfig":"28"},{"size":2053,"mtime":1636055757192,"results":"50","hashOfConfig":"28"},{"size":1982,"mtime":1636055709927,"results":"51","hashOfConfig":"28"},{"size":2354,"mtime":1636221165749,"results":"52","hashOfConfig":"28"},{"size":2385,"mtime":1636222977217,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"13k8eoc",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"56"},"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\index.js",[],["113","114"],"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\reportWebVitals.js",[],"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\App.js",[],"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\assets\\css\\themes.js",[],"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\utils\\queries.js",[],"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\utils\\mutations.js",[],["115","116"],"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\pages\\Scoreboard.js",[],"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\pages\\Quote.js",["117"],"import React from \"react\";\r\nimport { Link, Redirect, useParams } from \"react-router-dom\";\r\nimport { useQuery} from \"@apollo/client\";\r\nimport MetaTags from \"react-meta-tags\";\r\n\r\nimport { Container, Row, Col, Card, Button } from \"react-bootstrap\";\r\nimport { FaTwitter, FaFacebookF, FaReddit } from \"react-icons/fa\";\r\n\r\nimport TopicButton from \"../components/TopicButton\";\r\nimport AuthorButton from \"../components/AuthorButton\";\r\n\r\nimport { QUERY_QUOTE_ID } from \"../utils/queries\";\r\n\r\nfunction Quote () {\r\n    const { quoteId } = useParams();\r\n    let { loading, data } = useQuery(QUERY_QUOTE_ID, {\r\n        variables: {quoteId: quoteId},\r\n    })\r\n\r\n    if(!quoteId || quoteId === null || quoteId === \"undefined\") return (<Redirect to={`/`}/>);\r\n\r\n    if(loading) {\r\n        return <div className=\"loadingPage\">Loading...</div>;\r\n    }\r\n\r\n    if(!data) return (<Redirect to={`/404error`}/>);\r\n\r\n    const quote = data.quote;\r\n\r\n    return (\r\n        <Container>\r\n            <MetaTags>\r\n                <title>1001 Nuggets - {quote.author} - {quote.quoteText}</title>\r\n            </MetaTags>\r\n            <Card>\r\n                <Card.Header><Link to={`/`} className=\"link-theme\">Home</Link> {`>`} <Link to={`/authors`} className=\"link-theme\">Authors</Link> {`>`} <AuthorButton type={\"link\"} name={quote.author}/> {`>`} Quotes</Card.Header>\r\n                <Card.Body>\r\n                    <Row>\r\n                        <Col xs={8}>\r\n                            <Card className=\"mb-3\">\r\n                                <div id=\"quote-page\">\r\n                                    <Card.Body>\r\n                                        <Card.Text className=\"display-6\"><span className=\"quote-body\" id=\"main-quote\">\"{quote.quoteText}\"</span></Card.Text>\r\n                                        <Card.Text><strong><AuthorButton type={\"link\"} name={quote.author}/></strong></Card.Text>\r\n                                    </Card.Body>\r\n                                    <Card.Body className=\"text-center\">\r\n                                        <Link className=\"mx-2 share-button\" to={`https://twitter.com/intent/tweet?url=${window.location.href}`} id=\"share-twitter\"><FaTwitter/></Link>\r\n                                        <Link className=\"mx-2 share-button\" to={`https://www.facebook.com/sharer/sharer.php?u=${window.location.href}`} id=\"share-facebook\"><FaFacebookF/></Link>\r\n                                        <Link className=\"mx-2 share-button\" to={``} id=\"share-reddit\"><FaReddit/></Link>\r\n                                    </Card.Body>\r\n                                </div>\r\n                                {quote.topics.length !== 0 && \r\n                                    <Card.Footer className=\"text-center py-3\">\r\n                                            {quote.topics.map((index) => (\r\n                                                <span key={index} className=\"mx-1\"><TopicButton name={index}/></span>\r\n                                            ))}\r\n                                </Card.Footer>\r\n                                }\r\n                            </Card>\r\n                        </Col>\r\n                        <Col xs={4}>\r\n                            <p>More Quotes by Author and More Quotes by Topic</p>\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Body>\r\n            </Card>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Quote;","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\TopicButton\\index.js",[],"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\pages\\Main.js",[],"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\pages\\Topic.js",[],"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\pages\\Author.js",[],"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\Platform\\main.js",[],"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\Platform\\specific.js",[],"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\pages\\SearchResult.js",[],"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\NavBar\\index.js",["118","119","120","121"],"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\Footer\\index.js",[],"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\ErrorPage\\index.js",[],"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\MainpageSearch\\index.js",[],"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\AuthorCards\\index.js",["122"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useQuery } from \"@apollo/client\";\r\n\r\nimport { Row, Col, Card, Button } from \"react-bootstrap\";\r\n\r\nimport { QUERY_AUTHOR_ALL } from \"../../utils/queries\";\r\n\r\nconst SpecificCard = (author) => {    \r\n    return (\r\n        <Col xs={6} md={4} lg={3} className=\"mb-3\">\r\n            <Card className=\"text-center text-white card-main\">\r\n                <Link to={`/author/${author.author._id}`} className=\"text-white btn btn-theme btn-block py-3\">\r\n                    <strong>{author.author.name}</strong>\r\n                </Link>\r\n            </Card>\r\n        </Col>\r\n    )\r\n}\r\n\r\nconst AuthorCards = () => {\r\n    let {loading, data} = useQuery(QUERY_AUTHOR_ALL);\r\n    if(loading) return <p>Loading...</p>;\r\n\r\n    let authorList = [];\r\n    for(let index of data.authors){\r\n        authorList.push(index)\r\n    }\r\n    // console.log(authorList);\r\n\r\n    authorList = authorList.sort((a, b) => (b.quotes.length) - (a.quotes.length));\r\n\r\n    return (\r\n        <Row>\r\n            {authorList.map((index) => (\r\n                <SpecificCard author={index} key={index.name}/>\r\n            ))}\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default AuthorCards;","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\AuthorButton\\index.js",[],"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\AuthorLink\\index.js",[],"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\Results\\index.js",[],"C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\components\\ResultsQuote\\index.js",["123"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useQuery } from '@apollo/client';\r\nimport { Container, Card, Col, Row } from \"react-bootstrap\";\r\n\r\nimport TopicButton from \"../TopicButton\"\r\nimport AuthorButton from \"../AuthorButton\"\r\n\r\nimport { QUERY_QUOTE_ALL } from '../../utils/queries';\r\n\r\nconst ResultsQuote = ({input}) => {\r\n    let quoteList, newList = [];\r\n\r\n    let {loading, data} = useQuery(QUERY_QUOTE_ALL);\r\n    quoteList = data;\r\n\r\n    input = input.toUpperCase();\r\n    // console.log(input);\r\n    \r\n    if(loading) return <p>Loading...</p>\r\n\r\n    for(let index of quoteList.quotes) {\r\n        if(index.quoteText.toUpperCase().indexOf(input) > -1) newList.push(index);\r\n    }\r\n\r\n    if(newList[0]) {\r\n        return (\r\n            <Container className=\"mb-2\">\r\n                <div>\r\n                    <h5>Results under quotes . . .</h5>\r\n                    <hr></hr>\r\n                    <Row className=\"text-center\">\r\n                        {newList.map((index) => (\r\n                            <Col xs={12} md={6} xl={4} className=\"mb-3\" key={index.name + index.quoteText}>\r\n                                <Card>\r\n                                    <Link to={`/quote/${index._id}`} className=\"text-black\">\r\n                                        <Card.Body><i>\"{index.quoteText}\"</i></Card.Body>\r\n                                    </Link>\r\n                                    <Card.Footer>\r\n                                        <AuthorButton key={index.author} type={\"button\"} name={index.author}></AuthorButton>\r\n                                    </Card.Footer>\r\n                                </Card>\r\n                            </Col>\r\n                        ))}\r\n                    </Row>\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <Container>\r\n            <h5>No results under quotes...</h5>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ResultsQuote;\r\n","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\pages\\AuthorNav.js",["124"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport MetaTags from \"react-meta-tags\";\r\n\r\nimport { Container, Row, Col, Button, Card } from \"react-bootstrap\";\r\n\r\nimport { QUERY_AUTHOR_ALL } from \"../utils/queries\";\r\n\r\nfunction Freethinkers () {\r\n    let { loading, data } = useQuery(QUERY_AUTHOR_ALL);\r\n\r\n    if(loading) return <span>Loading...</span>\r\n\r\n    let authorList = [];\r\n    for(let index of data.authors){\r\n        authorList.push(index);\r\n    }\r\n\r\n    authorList = authorList.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n    const searchFunction = () => {\r\n        let input, filter, group, elements, body, textValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        group = document.getElementById(\"myGroup\");\r\n        elements = group.getElementsByClassName(\"col-12\")\r\n\r\n        for(let i = 0; i < elements.length; ++i) {\r\n            body = elements[i].getElementsByTagName(\"a\")[0];\r\n            textValue = body.textContent || body.innerText;\r\n            if(textValue.toUpperCase().indexOf(filter) > -1) elements[i].style.display=\"\";\r\n            else elements[i].style.display=\"none\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <MetaTags>\r\n                <title>1001 Nuggets - Authors</title>\r\n            </MetaTags>\r\n            <Card>\r\n                <Card.Header><Link className=\"link-theme\" to={`/`}>Home</Link> {`>`} Authors</Card.Header>\r\n                <Card.Header className=\"text-center py-3\">\r\n                    <Card.Title>Authors</Card.Title>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <input type=\"text\" id=\"myInput\" onKeyUp={searchFunction} placeholder=\"Search for thought names...\" className=\"mb-3\"/>\r\n                    <Row id=\"myGroup\">\r\n                        {authorList.map((index) => (\r\n                            <Col xs={12} sm={6} md={4} lg={3} key={index.name} className=\"text-center mb-3\">\r\n                                <Link to={`/author/${index._id}`} className=\"link-theme\">{index.name}</Link>\r\n                            </Col>\r\n                        ))}\r\n                    </Row>\r\n                </Card.Body>\r\n            </Card>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Freethinkers;","C:\\Users\\thees\\Documents\\Programming_Backups\\React Stuff\\1001nuggets\\client\\src\\pages\\TopicNav.js",["125"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport MetaTags from \"react-meta-tags\";\r\n\r\nimport { Container, Row, Col, Button, Card } from \"react-bootstrap\";\r\n\r\nimport { QUERY_TOPIC_ALL } from \"../utils/queries\";\r\n\r\nfunction TopicNavigation () {\r\n    let { loading, data } = useQuery(QUERY_TOPIC_ALL);\r\n\r\n    if(loading) return <span>Loading...</span>\r\n\r\n    const topicList = data.topics;\r\n\r\n    let sortedList = []\r\n\r\n    for(let index of topicList) {\r\n        sortedList.push(index)\r\n    }\r\n\r\n    sortedList = sortedList.sort((a,b) => a.name.localeCompare(b.name));\r\n\r\n    const searchFunction = () => {\r\n        let input, filter, group, elements, body, textValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        group = document.getElementById(\"myGroup\");\r\n        elements = group.getElementsByClassName(\"col-12\")\r\n\r\n        for(let i = 0; i < elements.length; ++i) {\r\n            body = elements[i].getElementsByTagName(\"a\")[0];\r\n            textValue = body.textContent || body.innerText;\r\n            if(textValue.toUpperCase().indexOf(filter) > -1) elements[i].style.display=\"\";\r\n            else elements[i].style.display=\"none\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <MetaTags>\r\n                <title>1001 Nuggets - Topics</title>\r\n            </MetaTags>\r\n            <Card>\r\n            <Card.Header><Link className=\"link-theme\" to={`/`}>Home</Link> {`>`} Topics</Card.Header>\r\n                <Card.Header className=\"text-center py-3\">\r\n                    <Card.Title>Topics</Card.Title>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <input type=\"text\" id=\"myInput\" onKeyUp={searchFunction} placeholder=\"Search for thought names...\" className=\"mb-3\"/>\r\n                    <Row id=\"myGroup\">\r\n                        {sortedList.map((index) => (\r\n                            <Col xs={12} sm={6} md={4} lg={3} key={index.name} className=\"text-center mb-3\">\r\n                                <Link to={`/topic/${index._id}`} className=\"link-theme\">{index.name}</Link>\r\n                            </Col>\r\n                        ))}\r\n                    </Row>\r\n                </Card.Body>\r\n            </Card>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default TopicNavigation;",{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"126","replacedBy":"130"},{"ruleId":"128","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":6,"column":37,"nodeType":"134","messageId":"135","endLine":6,"endColumn":43},{"ruleId":"132","severity":1,"message":"136","line":3,"column":23,"nodeType":"134","messageId":"135","endLine":3,"endColumn":26},{"ruleId":"132","severity":1,"message":"137","line":3,"column":28,"nodeType":"134","messageId":"135","endLine":3,"endColumn":31},{"ruleId":"132","severity":1,"message":"133","line":3,"column":44,"nodeType":"134","messageId":"135","endLine":3,"endColumn":50},{"ruleId":"138","severity":1,"message":"139","line":33,"column":65,"nodeType":"140","endLine":33,"endColumn":154},{"ruleId":"132","severity":1,"message":"133","line":5,"column":26,"nodeType":"134","messageId":"135","endLine":5,"endColumn":32},{"ruleId":"132","severity":1,"message":"141","line":6,"column":8,"nodeType":"134","messageId":"135","endLine":6,"endColumn":19},{"ruleId":"132","severity":1,"message":"133","line":6,"column":31,"nodeType":"134","messageId":"135","endLine":6,"endColumn":37},{"ruleId":"132","severity":1,"message":"133","line":6,"column":31,"nodeType":"134","messageId":"135","endLine":6,"endColumn":37},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],["142"],["143"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Col' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'TopicButton' is defined but never used.","no-global-assign","no-unsafe-negation"]